[
  {
    "Id": "606585ff-5f22-49a8-bb12-d1b52f155cfb",
    "Title": "Understanding Dependency Injection in .NET Core Applications",
    "Content": "Dependency Injection (DI) is a design pattern that implements Inversion of Control (IoC) for resolving dependencies. In .NET Core, the built-in DI container provides a simple and flexible way to manage object dependencies. This post explores best practices, common pitfalls, and real-world examples of implementing DI in your applications. We'll cover constructor injection, service lifetimes, and how to properly structure your application for testability.",
    "Views": 856,
    "Rating": 4.8,
    "CreatedAt": "2024-02-15T00:00:00.000Z",
    "UserId": "586d46d4-93e7-44d8-92db-88c273c8d1b5"
  },
  {
    "Id": "2deb2f40-7a55-4a0b-86d0-e3983cc460b8",
    "Title": "Mastering LINQ: Advanced Queries and Performance Optimization",
    "Content": "Language Integrated Query (LINQ) is a powerful feature in C# that enables you to write type-safe queries. This comprehensive guide delves into advanced LINQ techniques, including query optimization, proper use of deferred execution, and understanding the performance implications of different LINQ operations. We'll examine real-world scenarios and demonstrate how to write efficient queries that scale well with large datasets.",
    "Views": 1000,
    "Rating": 4.9,
    "CreatedAt": "2024-02-20T00:00:00.000Z",
    "UserId": "586d46d4-93e7-44d8-92db-88c273c8d1b5"
  },
  {
    "Id": "8ad01fc6-828e-4e4a-aae8-efb860d210fc",
    "Title": "Building Scalable Microservices with ASP.NET Core",
    "Content": "Microservices architecture has become increasingly popular for building scalable, maintainable applications. This post examines the key principles of microservices design using ASP.NET Core, including service communication patterns, data consistency challenges, and deployment strategies. We'll walk through creating a sample microservices ecosystem with practical examples and best practices.",
    "Views": 723,
    "Rating": 4.5,
    "CreatedAt": "2024-02-01T00:00:00.000Z",
    "UserId": "586d46d4-93e7-44d8-92db-88c273c8d1b5"
  },
  {
    "Id": "714f4d63-8e48-4a31-abaf-e3142420a34c",
    "Title": "Effective Error Handling in C# Applications",
    "Content": "Proper error handling is crucial for building robust and maintainable applications. This guide covers advanced exception handling techniques in C#, including custom exceptions, global error handling middleware in ASP.NET Core, and logging best practices. Learn how to implement a comprehensive error handling strategy that improves application reliability and debugging capabilities.",
    "Views": 645,
    "Rating": 4.7,
    "CreatedAt": "2024-02-10T00:00:00.000Z",
    "UserId": "586d46d4-93e7-44d8-92db-88c273c8d1b5"
  },
  {
    "Id": "5a250d42-f366-437a-9f21-c00f2d56e898",
    "Title": "Entity Framework Core: Advanced Patterns and Performance Tips",
    "Content": "Entity Framework Core is the go-to ORM for .NET developers, but using it effectively requires understanding its inner workings. This post explores advanced patterns including query optimization, proper use of tracking vs. no-tracking queries, and effective caching strategies. We'll also examine common performance pitfalls and how to avoid them in real-world scenarios.",
    "Views": 912,
    "Rating": 4.6,
    "CreatedAt": "2024-02-05T00:00:00.000Z",
    "UserId": "586d46d4-93e7-44d8-92db-88c273c8d1b5"
  }
]